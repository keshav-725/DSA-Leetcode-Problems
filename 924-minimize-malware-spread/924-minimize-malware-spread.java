class Solution {
    int []parent;
    int []size;
    public int find(int x){
        if(parent[x]==x) return x;
        parent[x] = find(parent[x]);
        return parent[x];
    }
    public void unionHelper(int x,int y){
        int lx = find(x);
        int ly = find(y);
        
        if(lx!=ly){
            if(size[lx]<size[ly]){
                parent[lx] = ly;
                size[ly] += size[lx];
            }else{
                parent[ly] = lx;
                size[lx] += size[ly];
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        for(int i=0;i<parent.length;i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph.length;j++){
                if(i!=j && graph[i][j]==1){
                    unionHelper(i,j);
                }
            }
        }
        int []imap = new int[graph.length];
        for(int i : initial){
            int ri = find(i);
            imap[ri]++;
        }
        Arrays.sort(initial);
        int ansi=initial[0];
        int anss = 0;
        for(int i : initial){
            int ri = find(i);
            
            if(imap[ri]==1){
                if(anss < size[ri]){
                    ansi = i;
                    anss = size[ri];
                }
            }
        }
        return ansi;
    }
}